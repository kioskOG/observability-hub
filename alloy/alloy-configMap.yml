apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: alloy-logs
data:
  config.alloy: |
    discovery.kubernetes "pods" {
      role = "pod"
     
     // https://grafana.com/docs/alloy/latest/collect/prometheus-metrics/
     // this demonstrates configuring Alloy to collect data (metrics or logs) from running production Kubernetes Pods in the default Namespace.
    //  namespaces {
    //    own_namespace = false

    //    names = ["default"]
    //  }

    //  selectors {
    //    role  = "pod"
    //    label = "environment in (production)"
    //  }
    }

    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label  = "container"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        action        = "replace"
        target_label  = "app"
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
        separator     = "/"
        target_label  = "job"
      }

      rule {
        source_labels = ["__meta_kubernetes_node_name"]
        target_label  = "node"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        separator     = "/"
        action        = "replace"
        replacement   = "/var/log/pods/*$1/*.log"
        target_label  = "__path__"
      }

      rule {
        action        = "replace"
        source_labels = ["__meta_kubernetes_pod_container_id"]
        regex         = "^(\\\\w+):\\/\\/.+$"
        replacement   = "$1"
        target_label  = "tmp_container_runtime"
      }

      // Drop pods in terminal phases to reduce noise & resource usage
      rule {
        action        = "drop"
        regex         = "Succeeded|Failed|Completed"
        source_labels = ["__meta_kubernetes_pod_phase"]
      }
    }

    // configuring Alloy to collect its own telemetry and forward it to the mimir backend.
    prometheus.exporter.self "default" {}

    prometheus.scrape "metamonitoring" {
      targets    = prometheus.exporter.self.default.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
    }

    logging {
      level    = "info"
      format   = "json"
      write_to = [loki.write.loki.receiver]
    }

    // tracing {
    //  sampling_fraction = 0.1
    //  write_to          = [otelcol.exporter.otlp.tempo.input]
    // }


    // System or Node logs
    // local.file_match discovers files on the local filesystem using glob patterns and the doublestar library. It returns an array of file paths.
    local.file_match "node_logs" {
      path_targets = [{
          // Monitor syslog to scrape node-logs
          __path__  = "/var/log/syslog",
          job       = "node/syslog",
          node_name = sys.env("HOSTNAME"),
          cluster     = sys.env("KUBE_CLUSTER_NAME"),
          environment = sys.env("ENVIRONMENT_NAME"),
          region      = sys.env("AWS_REGION"),
          cloud       = sys.env("CLOUD_PROVIDER"),
          platform    = sys.env("PLATFORM_TYPE"),
          node        = sys.env("KUBE_NODE_NAME"),
      }]
    }

    // loki.source.file reads log entries from files and forwards them to other loki.* components.
    // You can specify multiple loki.source.file components by giving them different labels.
    loki.source.file "node_logs" {
      targets    = local.file_match.node_logs.targets
      forward_to = [loki.write.loki.receiver]
    }

    // Node journald logs from Amazon Linux 2 (EKS)
    loki.relabel "journal" {
      forward_to = [loki.write.loki.receiver]

      rule {
        action = "labelmap"
        regex  = "__journal__(.+)"
      }

      rule {
        action         = "replace"
        source_labels = ["__journal__systemd_unit"]
        replacement    = "$1"
        target_label   = "unit"
      }

      rule {
        action         = "replace"
        source_labels = ["__journal__systemd_unit"]
        replacement    = "$1"
        target_label   = "service_name"
      }
    }

    loki.source.journal "node_logs" {
      path           = "/var/log/journal" // path inside the Alloy pod
      format_as_json = true
      max_age        = "12h"
      relabel_rules  = loki.relabel.journal.rules
      forward_to     = [loki.process.node_logs.receiver]

      labels = {
        job         = "node/journal",
        instance    = sys.env("HOSTNAME"),
        cluster     = sys.env("KUBE_CLUSTER_NAME"),
        environment = sys.env("ENVIRONMENT_NAME"),
        region      = sys.env("AWS_REGION"),
        cloud       = sys.env("CLOUD_PROVIDER"),
        platform    = sys.env("PLATFORM_TYPE"),
        node        = sys.env("KUBE_NODE_NAME"),
      }
    }

    loki.process "node_logs" {
      stage.static_labels {
        values = {
          source = "journal",
          level  = "unknown",
        }
      }

      stage.match {
        selector = "{level=\"unknown\"} |~ \"([IWED][0-9]{4}\\\\s+[0-9]{2}:[0-9]{2}:[0-9]{2}\\\\.[0-9]+)\""

        stage.regex {
          expression = "((?P<level>[A-Z])[0-9])"
        }

        stage.replace {
          source     = "level"
          expression = "(I)"
          replace    = "INFO"
        }

        stage.replace {
          source     = "level"
          expression = "(W)"
          replace    = "WARN"
        }

        stage.replace {
          source     = "level"
          expression = "(E)"
          replace    = "ERROR"
        }

        stage.replace {
          source     = "level"
          expression = "(D)"
          replace    = "DEBUG"
        }

        stage.labels {
          values = {
            level = "",
          }
        }
      }

      stage.match {
        selector = "{level=\"unknown\"}"

        stage.regex {
          expression = "(?i)(?:\\\"(?:level|loglevel|levelname|lvl|SeverityText)\\\":\\s*\\\"|\\s*(?:level|loglevel|lvl)=\\\"?|\\s+\\[?)(?P<level>(DEBUG?|INFO|WARN|ERROR|TRACE|FATAL))(\\\"|\\s+|-|\\s*\\])"
        }

        stage.labels {
          values = {
            level = "",
          }
        }
      }

      stage.label_keep {
        values = [
          "cluster",
          "environment",
          "region",
          "platform",
          "node",
          "instance",
          "service_name",
          "unit",
          "job",
          "level",
          "source",
        ]
      }

      forward_to = [loki.write.loki.receiver]
    }

    // Pods logs

    local.file_match "pod_logs" {
      path_targets = discovery.relabel.pod_logs.output
    }

    loki.source.file "pod_logs" {
      targets    = local.file_match.pod_logs.targets
      forward_to = [loki.process.pod_logs.receiver]
    }

    // Kubernetes Cluster Events

    loki.source.kubernetes_events "cluster_events" {
      job_name   = "integrations/kubernetes/eventhandler"
      log_format = "json"
      forward_to = [loki.process.cluster_events.receiver]
    }

    loki.process "pod_logs" {
      stage.static_labels {
        values = {
          cluster     = sys.env("KUBE_CLUSTER_NAME"),
          environment = sys.env("ENVIRONMENT_NAME"),
          region      = sys.env("AWS_REGION"),
          cloud       = sys.env("CLOUD_PROVIDER"),
          platform    = sys.env("PLATFORM_TYPE"),
          node        = sys.env("KUBE_NODE_NAME"),
        }
      }

      stage.match {
        selector = "{tmp_container_runtime=\"containerd\"}"
        stage.cri {}
        stage.labels {
          values = {
            flags  = "",
            stream = "",
          }
        }
      }

      stage.match {
        selector = "{tmp_container_runtime=\"docker\"}"
        stage.docker {}
        stage.labels {
          values = {
            stream = "",
          }
        }
      }

      stage.label_drop {
        values = ["tmp_container_runtime"]
      }

      stage.match {
        selector = "{namespace=~\"(monitoring|default|loki|mimir)\"}"
        stage.regex {
          expression = "(?P<method>GET|PUT|DELETE|POST)"
        }
        stage.regex {
          expression = "(?P<status_code_with_http_version>HTTP.{6}\\d{3})"
        }
        stage.regex {
          expression = "(?P<status_code>\\d{3})"
          source     = "status_code_with_http_version"
        }
        stage.labels {
          values = {
            method      = "",
            status_code = "",
          }
        }
      }

      stage.json {
        expressions = {
          level   = "level",
          app     = "app",
          env     = "env",
          message = "message",
        }
      }

      stage.regex {
        // This regex looks for 'trace_id' and 'span_id' keys followed by various characters,
        // then captures the hexadecimal ID. It's more tolerant of surrounding text.
        // It uses a non-greedy match (.*?) to capture the content between the key and the ID.
        
        expression = "(?:trace_id|TraceID|traceID)[^a-zA-Z0-9]*(?P<trace_id>[0-9a-fA-F]{32})|(?:span_id|SpanID|spanID)[^a-zA-Z0-9]*(?P<span_id>[0-9a-fA-F]{16})"
        
        // Explanation of the regex:
        // (?:trace_id|TraceID|traceID)   - Matches 'trace_id', 'TraceID', or 'traceID' (non-capturing group)
        // [^a-zA-Z0-9]* - Matches any non-alphanumeric character zero or more times (to handle ':', '=', spaces, quotes, etc.)
        // (?P<trace_id>[0-9a-fA-F]{32})   - Captures 32 hexadecimal characters into 'trace_id' named group
        // |                               - OR
        // (?:span_id|SpanID|spanID)     - Matches 'span_id', 'SpanID', or 'spanID'
        // [^a-zA-Z0-9]* - Same as above
        // (?P<span_id>[0-9a-fA-F]{16})    - Captures 16 hexadecimal characters into 'span_id' named group
        // Note: This regex assumes the standard lengths for Trace ID (32 hex chars) and Span ID (16 hex chars).
        // If your IDs can be different lengths, adjust {32} and {16} accordingly or use a broader match like +
      }

      stage.labels {
        values = {
          trace_id = "",    // Promote captured group to a label
          span_id  = "",    // Promote captured group to a label
        }
      }

      forward_to = [loki.write.loki.receiver]
    }

    loki.process "cluster_events" {
      stage.replace {
        expression = "(\"type\":\"Normal\")"
        replace = "\"type\":\"Normal\",\"level\":\"info\""
      }

      stage.replace {
        expression = "(\"type\":\"Warning\")"
        replace = "\"type\":\"Warning\",\"level\":\"warning\""
      }

      stage.json {
        expressions = {
          k8s_resource_kind = "kind",
          k8s_resource_name = "name",
          k8s_event_reason  = "reason",
          k8s_event_message = "message",
          k8s_event_type    = "type",
        }
      }

      stage.labels {
        values = {
          k8s_namespace_name = "namespace",
          k8s_resource_kind  = "k8s_resource_kind",
          k8s_event_reason   = "k8s_event_reason",
          k8s_event_type     = "k8s_event_type",
          k8s_resource_name  = "k8s_resource_name",
        }
      }

      stage.structured_metadata {
        values = {
          k8s_resource_name = "k8s_resource_name",
          k8s_event_message = "k8s_event_message",
        }
      }

      stage.label_keep {
        values = ["cluster", "organization", "region", "job", "k8s_namespace_name", "k8s_resource_kind", "k8s_event_reason", "k8s_event_type"]
      }

      forward_to = [loki.write.loki.receiver]
    }


    loki.write "loki" {
      endpoint {
        url = "http://loki-gateway.loki.svc.cluster.local/loki/api/v1/push"
        headers = {
          "Authorization" = "Basic bG9raS1jYW5hcnk6bG9raS1jYW5hcnk=",
          "X-Scope-OrgID" = "tenant1",
        }
      }
      external_labels = {
          cluster     = sys.env("KUBE_CLUSTER_NAME"),
          environment = sys.env("ENVIRONMENT_NAME"),
          region      = sys.env("AWS_REGION"),
          cloud       = sys.env("CLOUD_PROVIDER"),
          platform    = sys.env("PLATFORM_TYPE"),
          node        = sys.env("KUBE_NODE_NAME"),
          }
    }

    // --- OTLP pipeline with EKS resource detection ---
    otelcol.processor.resourcedetection "eks" {
      detectors = ["eks"]
      output {
        traces  = [otelcol.processor.k8sattributes.default.input]
        metrics = [otelcol.processor.k8sattributes.default.input]
      }
    }

    otelcol.receiver.otlp "default" {
      grpc {
        endpoint = "0.0.0.0:4317"
      }
      http {}
      output {
        traces  = [otelcol.processor.resourcedetection.eks.input]
        metrics = [otelcol.processor.resourcedetection.eks.input]
      }
    }

    otelcol.processor.k8sattributes "default" {
      extract {
        metadata = [
          "k8s.namespace.name",
          "k8s.node.name",
          "k8s.pod.name",
          "k8s.container.name",
          "k8s.deployment.name",
          "k8s.statefulset.name",
          "k8s.daemonset.name",
          "k8s.cronjob.name",
          "container.id",
          "container.image.tag",
          "container.image.name",
          "k8s.pod.start_time",
        ]
      }

      output {
        traces  = [
          otelcol.processor.batch.default.input,
          otelcol.connector.spanlogs.default.input,
          otelcol.connector.spanmetrics.default.input,
          otelcol.connector.servicegraph.default.input,
        ]
        metrics = [otelcol.processor.batch.default.input]
      }
    }

    // https://grafana.com/docs/tempo/latest/configuration/grafana-alloy/span-metrics/#generate-metrics-from-spans
    otelcol.connector.spanmetrics "default" {
      dimension {
        name    = "http.method"
        default = "GET"
      }

      dimension {
        name = "http.target"
      }

      aggregation_temporality = "DELTA"

      histogram {
        explicit {
          buckets = ["50ms", "100ms", "250ms", "1s", "5s", "10s"]
        }
      }

      metrics_flush_interval = "15s"
      namespace              = "traces.spanmetrics"
      resource_metrics_key_attributes = ["service.name", "telemetry.sdk.language", "telemetry.sdk.name"]

      output {
        metrics = [otelcol.exporter.prometheus.default.input]
      }
    }

    otelcol.connector.servicegraph "default" {
      dimensions = ["http.method", "http.target", "service.name"]
      database_name_attributes = ["db.name"]
      latency_histogram_buckets = ["2ms", "4ms", "6ms", "8ms", "10ms", "50ms", "100ms", "200ms", "400ms", "800ms", "1s", "1400ms", "2s", "5s", "10s", "15s"]
      metrics_flush_interval = "15s"

      output {
        metrics = [otelcol.exporter.prometheus.default.input]
      }
    }

    otelcol.processor.batch "default" {
      timeout          = "5s"
      send_batch_size  = 10000
      output {
        traces  = [otelcol.exporter.otlp.tempo.input]
        metrics = [otelcol.exporter.prometheus.default.input]
      }
    }

    otelcol.exporter.prometheus "default" {
      forward_to = [prometheus.remote_write.mimir.receiver]
    }

    prometheus.remote_write "mimir" {
      endpoint {
        url = "http://mimir-nginx.mimir.svc.cluster.local/api/v1/push"
        headers = {
          "Authorization" = "Basic bWltaXItbmdpbng6bWltaXItbmdpbng=",
        }
      }
      external_labels = {
          cluster     = sys.env("KUBE_CLUSTER_NAME"),
          environment = sys.env("ENVIRONMENT_NAME"),
          region      = sys.env("AWS_REGION"),
          cloud       = sys.env("CLOUD_PROVIDER"),
          platform    = sys.env("PLATFORM_TYPE"),
          node        = sys.env("KUBE_NODE_NAME"),
          }
    }

    otelcol.connector.spanlogs "default" {
      roots           = true
      span_attributes = ["http.method", "http.target"]
      labels = ["trace_id", "span_id", "service.name"]

      output {
        logs = [otelcol.exporter.loki.spanlogs_exporter.input]
      }
    }

    otelcol.exporter.otlp "tempo" {
      client {
        endpoint = "tempo-distributor.tempo.svc.cluster.local:4317"
        tls {
          insecure = true
          insecure_skip_verify = true
        }
      }
    }

    otelcol.exporter.loki "spanlogs_exporter" {
      forward_to = [loki.write.loki.receiver]
    }

    livedebugging {
      enabled = false
    }

    // -------------------------------
    // PYROSCOPE PROFILING
    // -------------------------------

    // Receives profiles over HTTP
    pyroscope.receive_http "http" {
      http {
        listen_address = "0.0.0.0"
        listen_port = "4041"
      }
      forward_to = [pyroscope.write.pyroscope.receiver]
    }

    pyroscope.write "pyroscope" {
      endpoint {
        url = "http://pyroscope-distributor.pyroscope.svc.cluster.local:4040"
      }
      external_labels = {
        cluster     = sys.env("KUBE_CLUSTER_NAME"),
        environment = sys.env("ENVIRONMENT_NAME"),
        region      = sys.env("AWS_REGION"),
        cloud       = sys.env("CLOUD_PROVIDER"),
        platform    = sys.env("PLATFORM_TYPE"),
        node        = sys.env("KUBE_NODE_NAME"),
      }
    }

    pyroscope.ebpf "instance" {
        forward_to = [pyroscope.write.pyroscope.receiver]
        targets = discovery.kubernetes.pods.targets
      }

    discovery.relabel "profiling_targets" {
      targets = discovery.kubernetes.pods.targets

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_pyroscope_io_scrape"]
        regex         = "true"
        action        = "keep"
      }

      rule {
        action        = "drop"
        regex         = "Pending|Succeeded|Failed|Completed"
        source_labels = ["__meta_kubernetes_pod_phase"]
        }

      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_pyroscope_io_port"]
        regex         = "([^:]+)(?::\\d+)?;(.+)"
        replacement   = "$1:$2"
        target_label  = "__address__"
        action        = "replace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_pyroscope_io_profile_path"]
        regex         = "(.+)"
        replacement   = "$1"
        target_label  = "__path__"
        action        = "replace"
      }

      rule {
        source_labels = ["__path__"]
        regex         = "^$"
        replacement   = "/debug/pprof/profile"
        target_label  = "__path__"
        action        = "replace"
      }

      rule {
        action        = "replace"
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
      }
      rule {
        action        = "replace"
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
      }
      rule {
        action        = "replace"
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label  = "container"
      }

      rule {
        action        = "replace"
        source_labels = ["__meta_kubernetes_node_name"]
        target_label  = "node"
        }
      
      rule {
        action = "labelmap"
        regex  = "__meta_kubernetes_pod_label_(.+)"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        target_label  = "app"
        action        = "replace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_pyroscope_io_service_name"]
        regex         = ""
        replacement   = "$1"
        target_label  = "service_name"
        action        = "drop"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        regex         = "(.+)"
        replacement   = "$1"
        target_label  = "service_name"
        action        = "replace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_uid"]
        target_label  = "pod_uid"
      }
      rule {
        source_labels = ["__meta_kubernetes_node_name"]
        target_label  = "node"
      }

      rule {
        action        = "replace"
        regex         = "(.*)@(.*)"
        replacement   = "${1}/${2}"
        separator     = "@"
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
        target_label  = "service_name"
        }

      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
        separator     = "/"
        target_label  = "job"
      }

      rule {
        target_label = "cluster"
        replacement  = sys.env("KUBE_CLUSTER_NAME")
      }
      rule {
        target_label = "environment"
        replacement  = sys.env("ENVIRONMENT_NAME")
      }
      rule {
        target_label = "region"
        replacement  = sys.env("AWS_REGION")
      }
      rule {
        target_label = "cloud"
        replacement  = sys.env("CLOUD_PROVIDER")
      }
      rule {
        target_label = "platform"
        replacement  = sys.env("PLATFORM_TYPE")
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_pyroscope_io_profile_path_allocs"]
        regex         = "(.+)"
        replacement   = "$1"
        target_label  = "__path__"
        action        = "replace"
      }

      rule {
        source_labels = ["__path__", "__meta_kubernetes_pod_annotation_pyroscope_io_profile_path_allocs"]
        regex         = "^/debug/pprof/profile$;(.+)"
        replacement   = "$1"
        target_label  = "__path__"
        action        = "replace"
      }
    }

    pyroscope.scrape "kubernetes_cpu_profiles" {
      targets         = discovery.relabel.profiling_targets.output
      forward_to      = [pyroscope.write.pyroscope.receiver]
      delta_profiling_duration = "55s"
      scrape_interval = "60s"
      scrape_timeout  = "10s"

      profiling_config {
        profile.fgprof {
          enabled = false
        }

        profile.block {
          enabled = false
        }

        profile.mutex {
          enabled = false
        }

        profile.memory {
          enabled = false
        }

        profile.process_cpu {
          enabled = true
        }

        profile.goroutine {
          enabled = false
        }
      }
    }

    // goroutine profiling
    discovery.relabel "kubernetes_pods_goroutine_default_name" {
      targets = concat(discovery.relabel.profiling_targets.output)

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape"]
        action        = "keep"
        regex         = "true"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name"]
        action        = "keep"
        regex         = ""
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme"]
        action        = "replace"
        regex         = "(https?)"
        target_label  = "__scheme__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path"]
        action        = "replace"
        regex         = "(.+)"
        target_label  = "__profile_path__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port"]
        action        = "replace"
        regex         = "(.+?)(?::\\d+)?;(\\d+)"
        target_label  = "__address__"
        replacement   = "$1:$2"
      }
    }

    discovery.relabel "kubernetes_pods_goroutine_custom_name" {
      targets = concat(discovery.relabel.profiling_targets.output)

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape"]
        action        = "keep"
        regex         = "true"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name"]
        action        = "drop"
        regex         = ""
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_port_name"]
        target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name"
        action        = "keepequal"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme"]
        action        = "replace"
        regex         = "(https?)"
        target_label  = "__scheme__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path"]
        action        = "replace"
        regex         = "(.+)"
        target_label  = "__profile_path__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port"]
        action        = "replace"
        regex         = "(.+?)(?::\\d+)?;(\\d+)"
        target_label  = "__address__"
        replacement   = "$1:$2"
      }
    }

    pyroscope.scrape "pyroscope_scrape_goroutine" {
      clustering {
        enabled = true
      }

      targets    = concat(discovery.relabel.kubernetes_pods_goroutine_default_name.output, discovery.relabel.kubernetes_pods_goroutine_custom_name.output)
      forward_to = [pyroscope.write.pyroscope.receiver]

      profiling_config {
        profile.memory {
          enabled = false
        }

        profile.process_cpu {
          enabled = false
        }

        profile.goroutine {
          enabled = true
        }

        profile.block {
          enabled = false
        }

        profile.mutex {
          enabled = false
        }

        profile.fgprof {
          enabled = false
        }
      }
    }

    discovery.relabel "kubernetes_pods_block_default_name" {
      targets = concat(discovery.relabel.profiling_targets.output)

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape"]
        action        = "keep"
        regex         = "true"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name"]
        action        = "keep"
        regex         = ""
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme"]
        action        = "replace"
        regex         = "(https?)"
        target_label  = "__scheme__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_path"]
        action        = "replace"
        regex         = "(.+)"
        target_label  = "__profile_path__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port"]
        action        = "replace"
        regex         = "(.+?)(?::\\d+)?;(\\d+)"
        target_label  = "__address__"
        replacement   = "$1:$2"
      }
    }

    discovery.relabel "kubernetes_pods_block_custom_name" {
      targets = concat(discovery.relabel.profiling_targets.output)

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape"]
        action        = "keep"
        regex         = "true"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name"]
        action        = "drop"
        regex         = ""
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_port_name"]
        target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name"
        action        = "keepequal"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme"]
        action        = "replace"
        regex         = "(https?)"
        target_label  = "__scheme__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_path"]
        action        = "replace"
        regex         = "(.+)"
        target_label  = "__profile_path__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port"]
        action        = "replace"
        regex         = "(.+?)(?::\\d+)?;(\\d+)"
        target_label  = "__address__"
        replacement   = "$1:$2"
      }
    }

    pyroscope.scrape "pyroscope_scrape_block" {
      clustering {
        enabled = true
      }

      targets    = concat(discovery.relabel.kubernetes_pods_block_default_name.output, discovery.relabel.kubernetes_pods_block_custom_name.output)
      forward_to = [pyroscope.write.pyroscope.receiver]

      profiling_config {
        profile.memory {
          enabled = false
        }

        profile.process_cpu {
          enabled = false
        }

        profile.goroutine {
          enabled = false
        }

        profile.block {
          enabled = true
        }

        profile.mutex {
          enabled = false
        }

        profile.fgprof {
          enabled = false
        }
      }
    }

    discovery.relabel "kubernetes_pods_mutex_default_name" {
      targets = concat(discovery.relabel.profiling_targets.output)

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape"]
        action        = "keep"
        regex         = "true"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name"]
        action        = "keep"
        regex         = ""
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme"]
        action        = "replace"
        regex         = "(https?)"
        target_label  = "__scheme__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path"]
        action        = "replace"
        regex         = "(.+)"
        target_label  = "__profile_path__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port"]
        action        = "replace"
        regex         = "(.+?)(?::\\d+)?;(\\d+)"
        target_label  = "__address__"
        replacement   = "$1:$2"
      }
    }

    discovery.relabel "kubernetes_pods_mutex_custom_name" {
      targets = concat(discovery.relabel.profiling_targets.output)

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape"]
        action        = "keep"
        regex         = "true"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name"]
        action        = "drop"
        regex         = ""
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_port_name"]
        target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name"
        action        = "keepequal"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme"]
        action        = "replace"
        regex         = "(https?)"
        target_label  = "__scheme__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path"]
        action        = "replace"
        regex         = "(.+)"
        target_label  = "__profile_path__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port"]
        action        = "replace"
        regex         = "(.+?)(?::\\d+)?;(\\d+)"
        target_label  = "__address__"
        replacement   = "$1:$2"
      }
    }

    pyroscope.scrape "pyroscope_scrape_mutex" {
      clustering {
        enabled = true
      }

      targets    = concat(discovery.relabel.kubernetes_pods_mutex_default_name.output, discovery.relabel.kubernetes_pods_mutex_custom_name.output)
      forward_to = [pyroscope.write.pyroscope.receiver]

      profiling_config {
        profile.memory {
          enabled = false
        }

        profile.process_cpu {
          enabled = false
        }

        profile.goroutine {
          enabled = false
        }

        profile.block {
          enabled = false
        }

        profile.mutex {
          enabled = true
        }

        profile.fgprof {
          enabled = false
        }
      }
    }

    discovery.relabel "kubernetes_pods_fgprof_default_name" {
      targets = concat(discovery.relabel.profiling_targets.output)

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scrape"]
        action        = "keep"
        regex         = "true"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name"]
        action        = "keep"
        regex         = ""
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scheme"]
        action        = "replace"
        regex         = "(https?)"
        target_label  = "__scheme__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_path"]
        action        = "replace"
        regex         = "(.+)"
        target_label  = "__profile_path__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port"]
        action        = "replace"
        regex         = "(.+?)(?::\\d+)?;(\\d+)"
        target_label  = "__address__"
        replacement   = "$1:$2"
      }
    }

    discovery.relabel "kubernetes_pods_fgprof_custom_name" {
      targets = concat(discovery.relabel.profiling_targets.output)

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scrape"]
        action        = "keep"
        regex         = "true"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name"]
        action        = "drop"
        regex         = ""
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_port_name"]
        target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name"
        action        = "keepequal"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scheme"]
        action        = "replace"
        regex         = "(https?)"
        target_label  = "__scheme__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_path"]
        action        = "replace"
        regex         = "(.+)"
        target_label  = "__profile_path__"
        replacement   = "$1"
      }

      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port"]
        action        = "replace"
        regex         = "(.+?)(?::\\d+)?;(\\d+)"
        target_label  = "__address__"
        replacement   = "$1:$2"
      }
    }

    pyroscope.scrape "pyroscope_scrape_fgprof" {
      clustering {
        enabled = true
      }

      targets    = concat(discovery.relabel.kubernetes_pods_fgprof_default_name.output, discovery.relabel.kubernetes_pods_fgprof_custom_name.output)
      forward_to = [pyroscope.write.pyroscope.receiver]

      profiling_config {
        profile.memory {
          enabled = false
        }

        profile.process_cpu {
          enabled = false
        }

        profile.goroutine {
          enabled = false
        }

        profile.block {
          enabled = false
        }

        profile.mutex {
          enabled = false
        }

        profile.fgprof {
          enabled = true
        }
      }
    }




  # kubectl create namespace alloy-logs

  # kubectl apply -f alloy-logs-configMap.yml

  # helm repo add grafana https:grafana.github.io/helm-charts
  # helm repo update

  # helm upgrade --install grafana-alloy grafana/alloy -f alloy-override-values.yaml --namespace alloy-logs

  # kubectl get pods -n alloy-logs -l app.kubernetes.io/name=grafana-alloy
  # kubectl logs -n alloy-logs -l app.kubernetes.io/name=grafana-alloy --tail=100


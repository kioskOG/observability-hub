alloy:
  enabled: false

pyroscope:
  config: |
    storage:
      backend: s3
      s3:
        bucket_name: ${env_pyroscope_chunk_bucket}
        endpoint: s3.${region_name}.amazonaws.com
        region: ${region_name}
    server:
      http_listen_network: tcp
      # gRPC
      grpc_listen_network: tcp
      # gRPC server listen port
      grpc_listen_port: 9095
      # Register instrumentation handlers (/metrics, etc.)
      register_instrumentation: true
      # Timeout for graceful shutdowns
      graceful_shutdown_timeout: 60s
      # Read timeout for HTTP server
      http_server_read_timeout: 60s
      # -- Max gRPC message size that can be received
      grpc_server_max_recv_msg_size: 16777216
      # -- Max gRPC message size that can be sent
      grpc_server_max_send_msg_size: 16777216
      # -- Write timeout for HTTP server
      http_server_write_timeout: 30s
    distributor:
      pushtimeout: 5s
      pool_config:
        client_cleanup_period: 15s
        health_check_ingesters: true
        remote_timeout: 5s
      ring:
        kvstore:
          store: memberlist
          prefix: "collectors/"
    ingester:
      lifecycler:
        ring:
          kvstore:
            store: memberlist
            prefix: "collectors/"
          replication_factor: 2
          zone_awareness_enabled: false
          heartbeat_timeout: 1m
    querier:
      pool_config:
        client_cleanup_period: 15s
        health_check_ingesters: true
        remote_timeout: 5s
      # The time after which a metric should be queried from storage and not just
      # ingesters. 0 means all queries are sent to store. If this option is enabled,
      # the time range of the query sent to the store-gateway will be manipulated to
      # ensure the query end is not more recent than 'now - query-store-after'.
      query_store_after: 4h
    query_scheduler:
      # Maximum number of outstanding requests per tenant per query-scheduler.
      # In-flight requests above this limit will fail with HTTP response status code 429.
      max_outstanding_requests_per_tenant: 200
    store_gateway:
      # The hash ring configuration.
      sharding_ring:
        # The key-value store used to share the hash ring across multiple instances.
        kvstore:
          store: "memberlist"
          prefix: "collectors/"
        tokens_file_path: /data/tokens
        heartbeat_period: 15s
        heartbeat_timeout: 1m
        replication_factor: 2
        zone_awareness_enabled: false
        wait_stability_min_duration: 0s
        wait_stability_max_duration: 5m
      bucket_store:
        # Directory to store synchronized pyroscope block headers. This directory is
        # not required to be persisted between restarts, but it's highly recommended
        # in order to improve the store-gateway startup time.
        sync_dir: "./data/pyroscope-sync/"
        sync_interval: 15m
        meta_sync_concurrency: 50

  serviceAccount:
    create: true
    name: pyroscope
    annotations:
      "eks.amazonaws.com/role-arn": "${pyroscope_role_arn}" # The service role you created
    
  image:
    repository: grafana/pyroscope
    pullPolicy: IfNotPresent
    # Allows to override the image tag, which defaults to the appVersion in the chart metadata
    tag: "1.14.0"
  extraArgs:
    store-gateway.sharding-ring.replication-factor: "2" #"3"
    log.level: debug
  extraLabels: {}
  extraEnvVars: {}
  imagePullSecrets: []
  dnsPolicy: ClusterFirst
  # serviceAccount:
  #   # Specifies whether a service account should be created
  #   create: true
  #   # Annotations to add to the service account
  #   annotations: {}
  #   # The name of the service account to use.
  #   # If not set and create is true, a name is generated using the fullname template
  #   name: ""
  
  podAnnotations:
    # Scrapes itself see https://grafana.com/docs/pyroscope/latest/deploy-kubernetes/helm/#optional-scrape-your-own-workloads-profiles
    profiles.grafana.com/memory.scrape: "true"
    profiles.grafana.com/memory.port_name: http2
    profiles.grafana.com/cpu.scrape: "true"
    profiles.grafana.com/cpu.port_name: http2
    profiles.grafana.com/goroutine.scrape: "true"
    profiles.grafana.com/goroutine.port_name: http2
    # profiles.grafana.com/block.scrape: "true"
    # profiles.grafana.com/mutex.scrape: "true"

  podSecurityContext:
    fsGroup: 10001
    runAsUser: 10001
    runAsNonRoot: true

  podDisruptionBudget:
    enabled: true
    maxUnavailable: 1
  service:
    type: ClusterIP
    port: 4040
    port_name: http2
    scheme: HTTP
    annotations: {}

  memberlist:
    port: 7946
    port_name: memberlist

  components:
    querier:
      kind: Deployment
      replicaCount: 1 #3
      resources:
        limits:
          memory: 1Gi
        requests:
          memory: 256Mi
          cpu: 256m #1
    query-frontend:
      kind: Deployment
      replicaCount: 1 #2
      resources:
        limits:
          memory: 1Gi
        requests:
          memory: 256Mi
          cpu: 100m
    query-scheduler:
      kind: Deployment
      replicaCount: 1 #2
      resources:
        limits:
          memory: 1Gi
        requests:
          memory: 256Mi
          cpu: 100m
    distributor:
      kind: Deployment
      replicaCount: 1 #2
      resources:
        limits:
          memory: 1Gi
        requests:
          memory: 256Mi
          cpu: 500m
    ingester:
      kind: StatefulSet
      replicaCount: 2 #3
      terminationGracePeriodSeconds: 600
      resources:
        limits:
          memory: 1Gi #16Gi
        requests:
          memory: 1Gi #8Gi
          cpu: 250m #1
      persistence:
        enabled: false
        accessModes:
          - ReadWriteOnce
        size: 5Gi
    compactor:
      kind: StatefulSet
      replicaCount: 1 #3
      terminationGracePeriodSeconds: 1200
      resources:
        limits:
          memory: 1Gi #16Gi
        requests:
          memory: 1Gi #8Gi
          cpu: 250m #1
      persistence:
        enabled: false
        accessModes:
          - ReadWriteOnce
        size: 5Gi
    store-gateway:
      kind: StatefulSet
      replicaCount: 1 #3
      persistence:
        # The store-gateway needs not need persistent storage, but we still run it as a StatefulSet
        # This is to avoid having blocks of data being
        enabled: false
      resources:
        limits:
          memory: 1Gi #16Gi
        requests:
          memory: 1Gi #8Gi
          cpu: 500m #1
      readinessProbe:
        # The store gateway can be configured to wait on startup for ring stability to be reached before it becomes
        # ready. See the `store-gateway.sharding-ring.wait-stability-min-duration` server argument for more information.
        #
        # Depending on this flag and the number of tenants + blocks that need to be synced on startup, pods can take
        # some time to become ready. This value can be used to ensure Kubernetes waits long enough and reduce errors.
        initialDelaySeconds: 60
    tenant-settings:
      kind: Deployment
      replicaCount: 1
      resources:
        limits:
          memory: 1Gi #4Gi
        requests:
          memory: 16Mi
          cpu: 0.1
    ad-hoc-profiles:
      kind: Deployment
      replicaCount: 1
      resources:
        limits:
          memory: 1Gi #4Gi
        requests:
          memory: 16Mi
          cpu: 0.1
minio:
  enabled: false

# ServiceMonitor configuration
serviceMonitor:
  # -- If enabled, ServiceMonitor resources for Prometheus Operator are created
  enabled: true
  # -- Namespace selector for ServiceMonitor resources
  namespaceSelector: null # namespace which this service will look for the services
  # -- Optional expressions to match on
  matchExpressions: []
    # - key: prometheus.io/service-monitor
    #   operator: NotIn
    #   values:
    #     - "false"
  # -- ServiceMonitor annotations
  annotations: {}
  # -- Additional ServiceMonitor labels
  labels:
    release: kube-prometheus-stack
  # -- ServiceMonitor scrape interval
  interval: 30s
  # -- ServiceMonitor scrape timeout in Go duration format (e.g. 15s)
  scrapeTimeout: 15s
  # -- ServiceMonitor relabel configs to apply to samples before scraping
  # https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
  relabelings: []
  # -- ServiceMonitor metric relabel configs to apply to samples before ingestion
  # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#endpoint
  metricRelabelings: []
  # --ServiceMonitor will add labels from the service to the Prometheus metric
  # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitorspec
  targetLabels: []
  # -- ServiceMonitor will use http by default, but you can pick https as well
  scheme: http
  # -- ServiceMonitor will use these tlsConfig settings to make the health check requests
  tlsConfig: null








# https://github.com/grafana/pyroscope/tree/main/examples

# https://grafana.com/docs/pyroscope/latest/deploy-kubernetes/helm/#optional-scrape-your-own-workloads-profiles


#   {
# 	"Version": "2012-10-17",
# 	"Statement": [
# 		{
# 			"Effect": "Allow",
# 			"Principal": {
# 				"Federated": "arn:aws:iam::xxxxxxxxxx:oidc-provider/oidc.eks.ap-southeast-1.amazonaws.com/id/905FD3625D5E720BDB50A6227B6B654A"
# 			},
# 			"Action": "sts:AssumeRoleWithWebIdentity",
# 			"Condition": {
# 				"StringEquals": {
# 					"oidc.eks.ap-southeast-1.amazonaws.com/id/905FD3625D5E720BDB50A6227B6B654A:sub": [
# 						"system:serviceaccount:mimir:mimir",
# 						"system:serviceaccount:tempo:tempo",
# 						"system:serviceaccount:pyroscope:pyroscope"
# 					],
# 					"oidc.eks.ap-southeast-1.amazonaws.com/id/905FD3625D5E720BDB50A6227B6B654A:aud": "sts.amazonaws.com"
# 				}
# 			}
# 		}
# 	]
# }